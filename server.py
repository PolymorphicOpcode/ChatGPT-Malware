import base64
import os
import sys
from http.server import BaseHTTPRequestHandler, HTTPServer
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import padding

class HTTPServer_RequestHandler(BaseHTTPRequestHandler):
    def do_POST(self):
        if self.path != '/log':
            self.send_response(404)
            LogUnauthorizedAccess(self.client_address[0], self.headers['User-Agent'])
            KillServer()
        else:
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            if not post_data:
                self.send_response(400)
                LogUnauthorizedAccess(self.client_address[0], self.headers['User-Agent'])
                KillServer()
            decrypted_data = Decrypt(post_data)
            WriteDataToFile(decrypted_data)
            self.send_response(200)

def WriteDataToFile(data):
    with open("log.txt", "a") as f:
        f.write(data)

def LogUnauthorizedAccess(ip_address, user_agent):
    with open("unauthorized_access.txt", "a") as f:
        f.write(f"{ip_address} - {user_agent}\n")

def Decrypt(encrypted_data):
    encrypted_data = base64.b64decode(encrypted_data)
    with open("private_key.pem", "rb") as key_file:
        private_key = key_file.read()
        private_key = RSA.import_key(private_key)
        decrypted_data = private_key.decrypt(
            encrypted_data,
            padding.OAEP(
                mgf=padding.MGF1(algorithm=hashes.SHA256()),
                algorithm=hashes.SHA256(),
                label=None
            )
        )
        return decrypted_data

def KillServer():
    print('Shutting down server...')
    sys.exit()

def RunServer():
    print('Starting server...')
    server_address = ('', 80)
    httpd = HTTPServer(server_address, HTTPServer_RequestHandler)
    print('Running server...')
    httpd.serve_forever()

if __name__ == "__main__":
    RunServer()